// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username String @id @db.VarChar(100) // @id nanit jadi primary keys
  password String @db.VarChar(100)
  name String @db.VarChar(100)
  // tidak wajib ada (buat optinal) --> artinya cuman bisa login sekali, ketika login lagi token nya akan di ganti lagi
  token String? @db.VarChar(100)

  // Relasi one to many (1 user bsia mememilki banyak contact)
  contacts Contact[]

  @@map("users") // utk mengenerate nama table nya
}

model Contact {
  id Int @id @default(autoincrement()) //@default utk milih kaya autoincrement
  first_name String @db.VarChar(100)
  last_name String? @db.VarChar(100)
  email String? @db.VarChar(100)
  phone String? @db.VarChar(100)
  username String @db.VarChar(100)

  // membuat relasi one to many
  user User @relation(fields: [username], references: [username])
  // field utk model ini, reference, ke field yang di tuju di model lain

  // tanda membuat penampung relation nya untuk one to many
  adressess Address[]

  @@map("contacts")
}

model Address {

  id Int @id @default(autoincrement())
  street String? @db.VarChar(255)
  city String? @db.VarChar(255)
  provience String? @db.VarChar(255)
  country String @db.VarChar(255)
  postal_code String @db.VarChar(255)
  contact_id Int

  // membuat relation one to many ke contact
  contact Contact @relation(fields: [contact_id], references: [id])

  @@map("addresses")
}